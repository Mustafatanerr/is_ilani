import time
import logging
import feedparser
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes
from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from webdriver_manager.chrome import ChromeDriverManager

# Telegram bot ayarlarÄ±
TELEGRAM_BOT_TOKEN = "7290235839:AAGGbb-Ubf3aBMIVbiRcgVF5Ig4Sj2s7P8Q"
# TÃ¼m ilanlarÄ±n RSS kaynaÄŸÄ±
RSS_FEED_URL = "https://isealimkariyerkapisi.cbiko.gov.tr/UPS/RssXMLs/ilanlar.xml"

# Loglama ayarlarÄ±
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

# Aranacak kelime kombinasyonlarÄ±
KEYWORDS = [
    "inÅŸaat",
    "mÃ¼hendis",
    "inÅŸaat mÃ¼hendisi",
    "mÃ¼hendislik fakÃ¼ltesi"
]

def fetch_job_detail(driver, url: str) -> str:
    """
    Selenium driver kullanarak, belirtilen URL'deki ilan detay sayfasÄ±nÄ± getirir.
    Sayfa yÃ¼klendiÄŸinde (body etiketinin varlÄ±ÄŸÄ±) sayfanÄ±n HTML iÃ§eriÄŸini dÃ¶ndÃ¼rÃ¼r.
    """
    try:
        driver.get(url)
        # Sayfa yÃ¼klemesinin tamamlanmasÄ± iÃ§in body elementini bekle
        WebDriverWait(driver, 20).until(EC.presence_of_element_located(("tag name", "body")))
        # Ekstra bekleme (JavaScript veya dinamik iÃ§erik iÃ§in)
        time.sleep(3)
        return driver.page_source
    except Exception as e:
        logger.error(f"{url} iÃ§in sayfa iÃ§eriÄŸi alÄ±nÄ±rken hata: {e}")
        return ""

async def rss_tarama(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    RSS feed'den tÃ¼m ilanlarÄ± Ã§ekip, her bir ilan detay sayfasÄ±na girer.
    Sayfa iÃ§eriÄŸinde tanÄ±mlÄ± anahtar kelime kombinasyonlarÄ±nÄ±n varlÄ±ÄŸÄ± kontrol edilir.
    EÅŸleÅŸen ilanlar, baÅŸlÄ±k, link ve eÅŸleÅŸen kelime bilgisiyle birlikte Telegram Ã¼zerinden gÃ¶nderilir.
    """
    await update.message.reply_text("RSS taramasÄ± baÅŸlatÄ±lÄ±yor...")

    try:
        feed = feedparser.parse(RSS_FEED_URL)
    except Exception as e:
        logger.error(f"RSS feed alÄ±nÄ±rken hata: {e}")
        await update.message.reply_text("RSS feed alÄ±nÄ±rken hata oluÅŸtu.")
        return

    if not feed.entries:
        await update.message.reply_text("RSS feed'inde ilan bulunamadÄ±.")
        return

    found_jobs = []

    # Selenium driver ayarlarÄ± (headless mod)
    options = Options()
    options.add_argument("--headless")
    options.add_argument("--disable-gpu")
    options.add_argument("--no-sandbox")
    options.add_argument("--window-size=1920,1080")
    service = Service(ChromeDriverManager().install())
    driver = webdriver.Chrome(service=service, options=options)

    try:
        for entry in feed.entries:
            title = entry.get("title", "BaÅŸlÄ±k Yok")
            link = entry.get("link", "")
            if not link:
                continue

            # Ä°lan detay sayfasÄ±nÄ± Ã§ek
            content = fetch_job_detail(driver, link)
            if not content:
                continue

            # Anahtar kelime kontrolÃ¼ iÃ§in sayfa iÃ§eriÄŸini kÃ¼Ã§Ã¼k harfe Ã§eviriyoruz
            content_lower = content.lower()
            matched_keywords = [kw for kw in KEYWORDS if kw.lower() in content_lower]

            if matched_keywords:
                found_jobs.append({
                    "title": title,
                    "link": link,
                    "matched_keywords": matched_keywords
                })
    finally:
        driver.quit()

    if found_jobs:
        message = f"âœ… ARAMA TAMAMLANDI! Toplam {len(found_jobs)} adet ilgili ilan bulundu.\n\n"
        for idx, job in enumerate(found_jobs, start=1):
            keywords_str = ", ".join(job["matched_keywords"])
            message += f"{idx}. {job['title']}\n   ğŸ”— {job['link']}\n   âœ… EÅŸleÅŸen kelimeler: {keywords_str}\n\n"
        await update.message.reply_text(message)
    else:
        await update.message.reply_text("AradÄ±ÄŸÄ±nÄ±z kriterlere uygun ilan bulunamadÄ±.")

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """KullanÄ±cÄ±ya baÅŸlangÄ±Ã§ mesajÄ± gÃ¶nderir."""
    await update.message.reply_text(
        "Merhaba! RSS tabanlÄ± ilan tarama sistemine hoÅŸgeldiniz. "
        "Ä°lanlarÄ± taramak iÃ§in /rss_tarama komutunu kullanabilirsiniz."
    )

def main():
    app = ApplicationBuilder().token(TELEGRAM_BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("rss_tarama", rss_tarama))
    app.run_polling()

if __name__ == "__main__":
    main()
